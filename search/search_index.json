{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SC-OPF &amp; MP-OPF: Power Flow Optimization Tools","text":"<p>Welcome to the documentation for SC-OPF (Security-Constrained Optimal Power Flow) and MP-OPF (Multi-Period Optimal Power Flow), a suite of tools for advanced power system optimization. These models are designed to help engineers, researchers, and system operators simulate and solve power flow problems under realistic system and operational constraints.</p>"},{"location":"#overview","title":"\u26a1 Overview","text":"<ul> <li>SC-OPF ensures secure operation under contingency scenarios (N-1 security), modeling system behavior after potential equipment failures.</li> <li>MP-OPF optimizes over multiple time periods, capturing ramping limits, storage behavior, and temporal constraints (e.g., load or generation profiles over time).</li> </ul> <p>These tools can be used independently or combined for security-aware, time-coupled optimization in power systems.</p>"},{"location":"#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Support for single and multi-period OPF</li> <li>Built-in N-1 contingency analysis</li> <li>Ramp rate modeling for generators</li> <li>Integration with industry-standard solvers (e.g., Pyomo)</li> <li>Modular and extensible architecture</li> <li>Support for IEEE benchmark cases</li> </ul>"},{"location":"#documentation-sections","title":"\ud83d\udcd8 Documentation Sections","text":"<p>This website is broken down into the following topics:</p> Topics <ul> <li>About this project</li> <li>Getting Started</li> <li>Datastructure and Elements</li> <li>Muiti-Period Optimal Power Flow</li> <li>Security-Constrained Optimal Power Flow</li> </ul>"},{"location":"about/","title":"About this Project","text":"<p>Welcome to the official documentation site for our project on Security-Constrained Optimal Power Flow (SC-OPF), developed at INESC TEC by members of the Center for Power and Energy Systems (CPES).</p> <p></p> <p>This project focuses on advancing methodologies and tools for solving SC-OPF problems, contributing to the reliable and secure operation of modern power systems.</p> <p>Here, you will find comprehensive documentation about the project, including technical details, background, and a step-by-step tutorial to guide you in using the code. Whether you're a researcher, practitioner, or simply interested in the field, we hope this resource will help you better understand and apply security-constrained OPF techniques.</p> <p>If you have questions or suggestions, feel free to reach out to us through our respective channels at INESC TEC.</p> <p>Thank you for visiting!</p>"},{"location":"authors/","title":"Authors","text":"<p>Copyright \u00a9 2025 INESCTEC, this project was developed by the following members.</p>"},{"location":"authors/#members","title":"Members:","text":"<p>Our team consists of:</p> <p>Diogo Andr\u00e9 Costa Reis</p> <p>Diogo Filipe Fonseca Pereira</p> <p>Tiago Andr\u00e9 Soares</p> <p>Micael Filipe Sim\u00f5es</p>"},{"location":"config_params/","title":"Configuration parameters","text":"<p>This file contains the operational parameters and solver configurations necessary to run a given optimization case. It allows you to control how the SC-OPF or MP-OPF behaves, including choices like optimization type, solver tolerances, objective formulations, and operational constraints.</p> <p>In this section, you will find a complete description of each parameter, its purpose, accepted values, and how it influences the solver's execution. It's defined by a <code>.json</code> file named after the case, for example, <code>case9_params.json</code>.</p> caseX_params.json<pre><code>{\n    \"obj_type\": \"COST\",\n    \"transf_reg\": false,\n    \"es_reg\": false,\n    \"fl_reg\": false,\n    \"rg_curt\": true,\n    \"l_curt\": false,\n    \"enforce_vg\": false,\n    \"branch_limit_type\": \"APPARENT_POWER\",\n\n    \"contingencies\": {\n        \"lines\": {\n            \"status\": false,\n            \"branch_id\": [9, 149]\n        },\n        \"generators\": {\n            \"status\": true,\n            \"gen_id\": [41]\n        }\n    },\n\n    \"slacks\": {\n        \"grid_operation\": {\n            \"voltage\": true,\n            \"branch_flow\": true\n        },\n        \"flexibility\": {\n            \"day_balance\": false\n        },\n        \"ess\": {\n            \"complementarity\": true,\n            \"charging\": false,\n            \"day_balance\": false\n        },\n        \"conventional_generation\": {\n            \"reactive\": true,\n            \"active\": true\n        },\n        \"node_balance\": false\n    },\n    \"solver\": {\n        \"name\": \"ipopt\",\n        \"solver_tol\": 1e-6,\n        \"verbose\": true\n    },\n    \"print_to_screen\": false,\n    \"plot_diagram\": false,\n    \"print_results_to_file\": false\n}\n</code></pre>"},{"location":"config_params/#structure-breakdown","title":"Structure Breakdown:","text":"Parameter Data Type Explanation obj_type string Sets the objective function to: \"COST\" - minimize total operational cost or \"CONGESTION_MANAGEMENT\" - managing congestion in the power network transf_reg boolean Enables/Disables tap-changing transformer regulation as part of the optimization es_reg boolean Enables/Disables energy storage regulation, i.e., storage devices won't be optimized actively fl_reg boolean Enables/Disables flexible loads from participating in the optimization rg_curt boolean Allows (or not) renewable generation curtailment, giving the model flexibility to reduce excess renewables l_curt boolean Enables/Disables load curtailment (load shedding) all demand must be met enforce_vg boolean Enforces (or not) variable generation (e.g., solar/wind) to strictly follow forecast branch_limit_type string Line flow limits are enforced based on, current (A),  apparent power (MVA) or Mixed contingencies boolean/integer This section defines contingency events/scenarios where elements (like lines or generators) fail slacks boolean This section controls where soft constraints (i.e., constraint violations with penalties) are allowed solver boolean/string Indicates the solvers settings print_to_screen boolean Enables/Disables output display in the console plot_diagram boolean Enables/Disables graphical plotting of the power system print_results_to_file boolean Enables/Disables saving results to external files <p>Note</p> <p>In the Contingencies parameter, the (N-1) criterion is applied, meaning each contingency is evaluated individually. As a result, a total of (C + 1) scenarios are created, where C represents the total number of contingencies (lines + generators) and, scenario 0 corresponds to the base case (a standard OPF without any contingencies).</p> <p>Inside the slacks parameter resides the following:</p>"},{"location":"config_params/#slacks","title":"Slacks:","text":"Parameter Data Type Explanation grid_operation boolean Enables/Disables Voltage limit violations and/or Branch flow limit violations flexibility boolean Enables/Disables daily energy balancing for flexible resources ess boolean Enables/Disables the relaxation of complementarity constraints, which softens the strict \"charge OR discharge\" rule; the relaxation of constraints related to charging limits; and/or the relaxation of daily energy balance constraints in energy storage systems conventional_generation boolean Allows some flexibility in the active/reactive power of conventional generators node_balance boolean Enables/Disables softening nodal power balance constraints, helpful for feasibility testing"},{"location":"diagram_examples/","title":"Diagram Examples","text":""},{"location":"diagram_examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"diagram_examples/#sequence-diagram","title":"Sequence diagram","text":"<pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"directory/","title":"Execution File","text":"<p>This <code>.json</code> file serves as a central configuration file that defines the overall setup for solving a case. It specifies the number of time periods to be considered in the optimization and provides the paths to all the necessary input files including topology, parameters, production and consumption data, and market data.</p> <p>The <code>CSY.json</code> file acts as a master reference, allowing the solver to locate and organize all input data correctly. This page explains its structure, required fields, and how to correctly configure it to ensure seamless integration with the SC-OPF or MP-OPF solvers. It's defined by a <code>.json</code> file named after the case scenario, for example, <code>CS2.json</code>.</p> CSY.json<pre><code>{\n    \"NumInstants\": 1,\n    \"Network\":\n        {\n            \"NetworkFilename\": \"case300.json\",\n            \"ParamsFilename\": \"case300_params.json\",\n            \"OperationalDataFilename\": \"case300.xlsx\",\n            \"MarketDataFilename\": \"CS2_market_data.xlsx\"\n        }\n}\n</code></pre>"},{"location":"directory/#structure-breakdown","title":"Structure Breakdown:","text":"Parameter Data Type Explanation NumInstants integer Number of periods to solve NetworkFilename string Topology file of the network to be studied ParamsFilename string Parameters configuration file of the network to be studied OperationalDataFilename string Operational data file of the network to be studied MarketDataFilename string Market data file to be considered <p>Warning</p> <p>For this to work, all the files must be placed within the same folder, which in turn should be located inside the project's data directory. For example, a folder named CS2 should contain the following files: <code>caseX.json</code>, <code>caseX_params.json</code>, <code>caseX.xlsx</code>, <code>CS2_market_data.xlsx</code>, and <code>CS2.json</code>.</p> <p>In short:</p> <pre><code>graph LR\n   B[Network Topology] --&gt; |Goes to| A{Execution File};\n  C[Number of instants to consider] --&gt; |Goes to| A;\n  D[Parameters to be considered] --&gt; |Goes to| A;\n  E[Network Operation data] --&gt; |Goes to| A;\n  F[Market data] --&gt; |Goes to| A;\n  A ---&gt; |Needed in order to| G[Build Model];\n  G --&gt; |And then| H{Solve the case};</code></pre>"},{"location":"elements/","title":"Datastructures and Elements","text":"<p>This section provides an overview of the data structures and files required to run the SC-OPF (Security-Constrained Optimal Power Flow) and MP-OPF (Multi Period Optimal Power Flow) solvers. Each of the following subpages describes a specific input file, its purpose, structure, and the required information to ensure a proper execution of the optimization routines. The required files are:</p> Files <ul> <li>Topology of the electrical grid</li> <li>Configuration parameters</li> <li>Production and Consumption data</li> <li>Market data</li> <li>Execution File</li> </ul> <p>Each subpage in this section explains how to create and structure these files properly, detailing the required fields, data formats, and any important considerations.</p> <p>By the end of this section, you should have a complete understanding of the required datasets and how to prepare them for successful execution of both solvers.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>You can begin using SC-OPF in just a few easy steps. First you need to install an IDE, in my case I used Pycharm, which can be installed through Anaconda, but you can use another one if you like. After installing the IDE you will need to install the following necessary libraries: Pyomo and IPOPT.</p>"},{"location":"getting_started/#pyomo","title":"Pyomo","text":"<p>Pyomo is a powerful open-source Python library used for defining and solving mathematical optimization problems. It supports a wide range of optimization types, including linear programming (LP), mixed-integer programming (MIP), nonlinear programming (NLP), and more. Pyomo allows users to build complex optimization models in a flexible and readable way using Python code. It can interface with various solvers like GLPK, CBC, CPLEX, and Gurobi. Pyomo is widely used in academia and industry for operations research, supply chain optimization, energy systems, and engineering applications. Its strength lies in its modeling flexibility and integration with the Python ecosystem.</p> <p>If you are using Anaconda, install Pyomo through the anaconda prompt: <pre><code>conda install conda-forge::pyomo\n</code></pre> You can also install it with pip: <pre><code>pip install pyomo\n</code></pre></p>"},{"location":"getting_started/#ipopt","title":"IPOPT","text":"<p>IPOPT (Interior Point Optimizer) is an open-source software package for large-scale nonlinear optimization. It is designed to solve problems with continuous variables, including nonlinear programming (NLP) problems that may have thousands or millions of variables and constraints. IPOPT uses an interior-point algorithm and supports sparse matrix techniques for efficient computation. It is particularly effective for smooth, constrained optimization problems in engineering, economics, and scientific computing. IPOPT can be used with modeling languages like Pyomo and AMPL, and integrates with various linear algebra libraries for improved performance.</p> <p>If you are using Anaconda, install IPOPT through the anaconda prompt: <pre><code>conda install conda-forge::ipopt\n</code></pre> or <pre><code>conda install -c conda-forge ipopt\n</code></pre> You can also install it with pip: <pre><code>pip install cyipopt\n</code></pre> To use IPOPT you will also need to create an environment variable with its location. To find the corresponding location, run the following code in the anaconda prompt: <pre><code>where ipopt\n</code></pre> It will return the location of IPOPT, copy that location as it is essential to create the environment variable. Simply search for environment variable when clicking the Windows button. it should show something like this:  Then, by pressing Edit (\"Editar\" in portuguese), you can create your environment variable.  All you need to do is add the variable IPOPTDIR, with its corresponding location. </p> <p>Recommendation</p> <p>We recommend using the HSL solvers from UK Research and Innovation, because they are much faster. However, to access them, you need to submit a request with a justification. After approval, you\u2019ll receive a set of packages to download, along with a README file that guides you through the installation process.</p> <p>With this you are now ready to compile the code! If you don't have it, then here is how you can get access to it.</p>"},{"location":"getting_started/#download-the-code","title":"Download the code","text":"<p>You can download the code from GitLab or GitHub. There, you\u2019ll find all the auxiliary code and data sources for the various test cases. To run a specific case, you only need to modify the <code>main.py</code> file and the corresponding input data files (<code>.json</code> and <code>.xlsx</code>). For details on how each function works, refer to the Multi-Period Optimal Power Flow and Security-Constrained Optimal Power Flow modules.</p>"},{"location":"market/","title":"Market data","text":"<p>The <code>CSY.xlsx</code> file contains a single sheet with market-related data necessary for running market-oriented optimizations like MP-OPF. It provides cost curves, bids, offers, and other market-related parameters that define how generation and consumption units interact within the market framework.</p> <p>Here, you will find explanations of the required data structure, expected formats, and guidance on how to properly define market participation inputs for each actor in the system. It's defined by a <code>.xlsx</code> file named after the case scenario, for example, <code>CS2_market_data.xlsx</code>.</p> <p>This sheet contains the following data.</p>"},{"location":"market/#data-breakdown","title":"Data Breakdown:","text":"Data Data Type Explanation Cp float Cost of production for each period Cflex float Flexibility of that same cost for each period"},{"location":"mp_opf/","title":"Multi-Period Optimal Power Flow","text":"<p>Multi-Period Optimal Power Flow (MP-OPF) extends the traditional optimal power flow analysis by considering a sequence of time steps, enabling the modeling of time-coupled constraints such as energy storage behavior and varying load or generation profiles. This approach is essential for studying the dynamic operation of power systems over time and for optimizing decisions that depend on both current and future system states.</p> <p>In this section, you will learn how to set up and run MP-OPF simulations and understand the specific challenges involved (such as data consistency and intertemporal constraints).</p> <p>After having the correct files in the Execution file, all you need to do is make the proper changes to the <code>main.py</code> file.</p> main.py<pre><code>if __name__ == \"__main__\":\n\n    case_study = CaseStudy()\n    case_study.read_data('CS2')\n\n\n    # mpopf - multiple period OPF\n    #case_study.run_mpopf()\n\n    # scopf - security constraint OPF\n    #case_study.run_scopf()\n</code></pre> <p>As shown in the code block above, you need to modify the scenario file on line 13 to match the specific case you want to analyze in this example, it\u2019s <code>CS2.json</code>. This is the execution file referenced here.</p> <p>Next, enable the type of OPF you want to solve by uncommenting the corresponding line. For solving the Multi-Period OPF (MP-OPF), uncomment line 17.</p> <p>Warning</p> <p>Do not uncomment both line 17 and line 20 simultaneously. Attempting to solve both OPF types at the same time may result in inaccurate or inconsistent results.</p>"},{"location":"opf/","title":"OPF","text":"<p>Power flow analysis is the most critical static operation in network calculations. This section explains how to perform various types of power flow analyses (MP-OPF and SC-OPF), highlights known issues and limitations.</p> Available OPF's <ul> <li>Multi-Period Optimal Power Flow</li> <li>Security-Constrained Optimal Power Flow</li> </ul> <p>The results of each OPF solution are saved as Excel files named according to the case and the OPF type. For example: <code>CS2_MP-OPF_results.xlsx</code> and <code>CS2_SC-OPF_results.xlsx</code>.</p> <p>These result files are stored in a \"Results\" folder located within the corresponding case scenario directory (e.g., within the <code>CS2</code> folder in this example).</p>"},{"location":"opf/#results-structure-breakdown","title":"Results Structure Breakdown:","text":"<p>The results file contains multiple sheets, starting with the <code>main</code> sheet, which provides a summary of the entire Excel file. Additional sheets include detailed information such as the power flow through each line and other relevant network parameters.</p> Sheet Name Data Type Explanation Main Info float Summary of all results. Including Objective, losses, renewable generation, etc. per scenario Market Cost Info float Info about the market per scenario and period Voltage float Voltage results (phase and magnitude) per scenario and period Consumption float Consumption data (reactive and active power) per scenario and period Generation float Generation results (reactive and active power) per scenario and period Branch Losses float Losses in each branch per scenario and period Transformer Ratio float Transformer Ratio of each transformer Branch Loading float Refers to how much of the branch's capacity is being used in a certain direction Power Flows float Power Flow results in each branch per scenario and period Energy Storage float Energy Storage units results through out every period for each scenario Relaxation Slacks float Relaxation Slacks used and there respected values"},{"location":"prod_cons/","title":"Production and Consumption data","text":"<p>This Excel file provides time-dependent data for both generation and consumption associated with the elements in the network. Each sheet represents a dataset related to specific elements such as generators or loads, and includes detailed profiles for power production, consumption, and availability.</p> <p>This page explains how the data should be organized, the required fields for each sheet, and best practices for preparing consistent and accurate input. It's defined by a <code>.xlsx</code> file named after the case, for example, <code>case9.xlsx</code>.</p> <p>This file is divided into 5 sheets.</p>"},{"location":"prod_cons/#structure-breakdown","title":"Structure Breakdown:","text":"Sheet name Data Type Explanation Pc float Value of active power consumption of each load (lines) in each period (columns) Qc float Value of reactive power consumption of each load (lines) in each period (columns) UpFlex float Value of upward flexibility of each load (lines) in each period (columns) DownFlex float Value of downward flexibility of each load (lines) in each period (columns) Pg float Value of active power generated of each generator (lines) in each period (columns) Qg float Value of reactive power generated of each generator (lines) in each period (columns) GenStatus integer Status of each generator (lines) in each period (columns); 1 - Online, 0 - Offline"},{"location":"sc_opf/","title":"Security-Constrained Optimal Power Flow","text":"<p>Security-Constrained Optimal Power Flow (SC-OPF) is an advanced extension of the traditional OPF formulation that incorporates system security considerations into the optimization process. In addition to minimizing operational costs or losses, SC-OPF ensures that the power system remains within safe operating limits even under predefined contingency scenarios, such as line outages or generator failures (commonly referred to as N-1 security).</p> <p>This approach is essential for maintaining system reliability and stability, especially in large-scale or critical infrastructure networks. By accounting for contingencies during the optimization, SC-OPF helps operators make decisions that are both economically efficient and resilient to unexpected disruptions.</p> <p>In this section, you will learn how to set up and execute SC-OPF analyses, define contingency cases, interpret the results, and understand the trade-offs between cost optimization and system security.</p> main.py<pre><code>if __name__ == \"__main__\":\n\n    case_study = CaseStudy()\n    case_study.read_data('CS2')\n\n\n    # mpopf - multiple period OPF\n    #case_study.run_mpopf()\n\n    # scopf - security constraint OPF\n    #case_study.run_scopf()\n</code></pre> <p>As shown in the code block above, you need to modify the scenario file on line 13 to match the specific case you want to analyze in this example, it\u2019s <code>CS2.json</code>. This is the execution file referenced here.</p> <p>Next, enable the type of OPF you want to solve by uncommenting the corresponding line. For solving the Security-Constrained OPF (SC-OPF), uncomment line 20.</p> <p>Warning</p> <p>Do not uncomment both line 17 and line 20 simultaneously. Attempting to solve both OPF types at the same time may result in inaccurate or inconsistent results.</p>"},{"location":"topology/","title":"Topology of the electrical grid","text":"<p>This file defines the network topology of the electrical grid for a specific case. It describes how the various elements such as buses, generators, loads, lines, and transformers are connected. The data is organized in a structured <code>.json</code> format, with tables corresponding to each type of element. Each table has columns representing the parameters and rows corresponding to individual elements.</p> <p>The system network is defined by a <code>.json</code> file named after the case, for example, <code>case9.json</code>.</p> <p>This is exemplified here: caseX.json<pre><code>{\n    \"baseMVA\": 100.0,\n    \"nodes\": [\n        {\"bus_i\": 1, \"type\": 3, \"Gs\": 0.0, \"Bs\": 0.0, \"baseKV\": 135.0, \"Vmax\": 1.05, \"Vmin\": 0.95},\n        ...\n    ],\n    \"generators\": [\n        {\"gen_id\":1,\"bus\":1,\"Pmax\":80,\"Pmin\":0,\"Qmax\":150,\"Qmin\":-20,\"Vg\":1,\"status\":1, \"type\": \"CONV\", \"ramp_rate\":0.05},\n        ...\n    ],\n    \"loads\": [\n        {\"load_id\": 1, \"bus\": 2, \"status\": 1, \"fl_reg\": 1},\n        ...\n    ],\n    \"lines\": [\n        {\"branch_id\": 1, \"fbus\": 1, \"tbus\": 2, \"r\": 0.02, \"x\": 0.06, \"b\": 0.03, \"rating\": 130.0, \"status\": 1},\n        ...\n    ],\n    \"transformers\": [\n        {\"branch_id\": 3, \"fbus\": 37, \"tbus\": 22, \"r\": 6e-05, \"x\": 0.00046, \"b\": 0.0, \"rating\": 2500.0, \"ratio\": 1.0082, \"status\": 1, \"vmag_reg\": 1},\n        ...\n    ],\n    \"energy_storage\": [\n        {\"es_id\": 1, \"bus\": 1, \"s\": 10, \"e\": 20, \"e_init\": 10, \"e_min\": 1, \"e_max\": 19, \"eff_ch\": 0.9, \"eff_dch\": 0.9, \"max_pf\": 0.9, \"min_pf\": -0.9},\n        ...\n    ]\n}\n</code></pre></p> <p>In short, you will need to provide the following parameters:</p>"},{"location":"topology/#buses-nodes","title":"Buses (Nodes):","text":"Parameter Data Type Explanation bus_i integer Bus number (positive integer) type integer Bus type: PQ - 1; PV - 2; REF - 3; Isolated - 4 Gs float Shunt conductance (MW demanded at V = 1.0 p.u.) Bs float Shunt susceptance (MVAr injected at V = 1.0 p.u.) baseKV float Base voltage (kV) Vmax float Maximum voltage magnitude (p.u.) Vmin float Minimum voltage magnitude (p.u.)"},{"location":"topology/#generators","title":"Generators:","text":"Parameter Data Type Explanation gen_id integer Generator ID bus integer Bus number that the generator is connected Pmax float Maximum real power output (MW) Pmin float Minimum real power output (MW) Qmax float Maximum reactive power output (MVAr) Qmin float Minimum reactive power output (MVAr) Vg float Voltage magnitude setpoint (p.u.) status integer Status: 1 - Machine in service; 0 - Machine out of service type string Type of generator: Conv, Wind, Solar, etc ramp_rate float Physical Ramp rate (P/min) <p>Info</p> <p>Based on our investigation, we obtained ramp rate values corresponding to each generator type.</p> Generator - Fuel Type Ramp rate (% P/min) Coal 1 - 4 Coal - SOTA &lt; 6 Hydro 10 - 30 Open Cycle gas turbines 8 - 12 Open Cycle gas turbines - SOTA &lt; 15 Combined Cycle gas turbines 2 - 4 Combined Cycle gas turbines - SOTA 8 - 10 Thermal (Poland) 2 - 6 Thermal (Denmark) 4 Thermal (Germany) &lt; 6 Nuclear 100 <p>With SOTA being State of the art.</p>"},{"location":"topology/#loads","title":"Loads:","text":"Parameter Data Type Explanation load_id integer Load number (positive integer) bus integer Bus number that the load is connected status integer Status: 1 - Load Online; 0 - Load Offline fl_reg integer Indicates if the load is flexible, 1 - If it is, 0 - Otherwise"},{"location":"topology/#lines","title":"Lines:","text":"Parameter Data Type Explanation branch_id integer Line ID fbus integer From bus number tbus integer To bus number r float Resistance (p.u.) x float Reactance (p.u.) b float Total line charging susceptance (p.u.) rating float Rating A (MVA, long term rating) status integer Status: 1 - Line in service; 0 - Line out of service <p>Info</p> <p>The ramp rate which defines how much the capacity limits of branches increase under contingency conditions is set to 15% for lines and 20% for transformers. These values are configured in the <code>branch.py</code> file.</p> <p>Note</p> <p>Transformers are treated as branches in the system, with a few additional parameters. This is why their element table closely resembles the one used for Lines.</p>"},{"location":"topology/#transformers","title":"Transformers:","text":"Parameter Data Type Explanation branch_id integer Line ID fbus integer From bus number tbus integer To bus number r float Resistance (p.u.) x float Reactance (p.u.) b float Total line charging susceptance (p.u.) rating float Rating A (MVA, long term rating) ratio float Transformer off nominal turns ratio ( = 0 for lines; taps at 'from' bus, impedance at 'to' bus, i.e. if r = x = 0, then ratio = Vf / Vt) status integer Status: 1 - Line in service; 0 - Line out of service vmag_reg integer Indicates if transformer has voltage magnitude regulation (1 - If it does)"},{"location":"topology/#energy-storage-systems","title":"Energy Storage Systems:","text":"Parameter Data Type Explanation es_id integer Energy storage identifier bus integer The bus (node) number in the power network to which the storage unit is connected s float Apparent power rating (MVA) e float Total energy capacity of the storage device (MWh) e_init float Initial energy stored at the beginning of the simulation (MWh) e_min float Minimum allowable energy (MWh) e_max float Maximum allowable energy, often 95% of e (MWh) eff_ch float Charging efficiency (0 to 1, fraction of input power converted to stored energy) eff_dch float Discharging efficiency (0 to 1, fraction of stored energy converted to output power) max_pf float Maximum power factor (leading/lagging) allowed when operating \u2014 defines reactive power capability limit (0 to 1) min_pf float Minimum power factor (0 to 1)"}]}